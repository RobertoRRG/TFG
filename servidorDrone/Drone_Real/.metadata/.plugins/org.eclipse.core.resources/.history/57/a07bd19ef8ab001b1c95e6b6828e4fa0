package servidor;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import de.yadrone.base.ARDrone;
import de.yadrone.base.IARDrone;
import de.yadrone.base.command.CommandManager;

import java.io.IOException;

public class servidorDrone {
	private static final String ARRANCAR_COMUNICACION = "arrancar_comunicacion";
	private static final String ATERRIZAR = "aterrizar";
	private static final String DESPEGAR = "despegar";
	private static final String SEGUIR_RECTO = "seguir_recto";
	private static final String GIRAR_DERECHA = "girar_derecha";
	private static final String GIRAR_IZQUIERDA= "girar_izquierda";
	private static final String POSICION_ACTUAL = "posicion_actual";
	private static final String ORIENTACION_ACTUAL = "orientacion_actual";
	private static final String SACAR_IMAGEN = "sacar_imagen";

	private static final String OK = "ok";
	private static final String NOK = "nok";
	private static int port = 2018;

	private IARDrone drone = null;
	private CommandManager cmd = null;
	private double[] posicion;
	private int orientacionYaw;
	private int time;//s
	private int speed;//m/s
	public drone() throws Exception{
		/**
			drone = new ARDrone();
			drone.start();
			cmd = drone.getCommandManager();
			cmd.setOutdoor(false, false);
			speed = 4; // Preguntar Jesús como poner 4 m/s
			drone.setSpeed(speed);
			time = 1
		 **/
		posicion = new double[2];
		orientacionYaw = 0;
		System.out.println("Activada conexión con drone..");
	}
	public void despegar() {
		System.out.println("Despegando drone...");
		//cmd.takeOff();
		//cmd.waitFor(2000);
		//cmd.hover();
	}
	public void aterrizar() {
		System.out.println("Aterrizando y parando funcionamiento..");
		//cmd.landing();
	}
	public void seguirRecto() {
		System.out.println("Avanzando...");
		//cmd.forward(speed).doFor(1000);
		recalcularPosicion();
	}
	public void yawDerecha() {
		System.out.println("Girando a la derecha 15 grados...");
		recalcularOrientacion(15);
		
	}
	public void yawIzquierda() {
		System.out.println("Girando a la izquierda 15 grados...");
		recalcularOrientacion(-15);
	}
	public void sacarImagen() {
		System.out.println("Grabando imagen en carpeta...");
	}
	public double[] posicionActual() {
		return posicion;
	}
	public double orientacionActual() {
		return Math.toRadians(orientacionYaw);
	}
	private void recalcularPosicion() {
		posicion[0] = posicion[0] + Math.cos(Math.toRadians(orientacionYaw)) * 4;
		posicion[1] = posicion[1] + Math.sin(Math.toRadians(orientacionYaw))* 4;
	}
	private void recalcularOrientacion(Integer angulo) {
		orientacionYaw = orientacionYaw + angulo;
	}
	/**

	public void run() {
		cmd.setOutdoor(false, false);

		int speed = 20; // Porcentaje sobre la velocidad máxima
		drone.setSpeed( speed );

		cmd.takeOff();
		cmd.waitFor(2000);
		cmd.hover();
		cmd.waitFor(5000);

	    // Adelante dos segundos, derecha un segundo, atras dos segundos, izquierda un segundo
		cmd.forward(speed).doFor(2000);
//		drone.forward();
//		cmd.waitFor(2000);

		cmd.goRight(speed).doFor(1000);
		cmd.backward(speed).doFor(2000);
		cmd.goLeft(speed).doFor(1000);

		cmd.hover();
		cmd.waitFor(2000);
		cmd.landing();
	}
	 */
	public void stop() {
		//cmd.stop();
	}

	public static void main(String[] args) {
		ServerSocket server;
		try {
			server = new ServerSocket(port);
			System.out.println("Esperando cliente");
			Socket cli = server.accept();

			String recibido = "";

			OutputStreamWriter outw = new OutputStreamWriter(cli.getOutputStream(), "UTF8");
			InputStreamReader inw = new InputStreamReader(cli.getInputStream(), "UTF8");

			drone drone = null;
			char[] cbuf = new char[512];
			boolean servidorON = true;
			while (servidorON) {
				int r = 0;
				recibido ="";
				r = inw.read(cbuf);
				if (r != -1) {
					for (char c : cbuf) {
						recibido += c;
						if (c == 00) {
							break;
						}
					}
						recibido = recibido.trim();
						switch(recibido) {		
						case ATERRIZAR:
							try {
								drone.aterrizar();
							} catch (Exception e) {					
								System.out.println("Error al realizar el paso de avanzar..");
								outw.write(NOK.toCharArray());
								outw.flush();
								if ( drone != null ) {
									drone.stop();
									System.exit(0);
								}
							}
							outw.write(OK.toCharArray());
							outw.flush();
							servidorON = false;
							break;
						case DESPEGAR:
							try {
								drone.despegar();
							} catch (Exception e) {					
								System.out.println("Error al realizar el despegue del drone..");
								outw.write(NOK.toCharArray());
								outw.flush();
								if ( drone != null ) {
									drone.stop();
									System.exit(0);
								}
							}
							outw.write(OK.toCharArray());
							outw.flush();
							break;	
						case ARRANCAR_COMUNICACION:
							try {
								drone = new drone();
							} catch (Exception e) {					
								System.out.println("Error al iniciar la comunicación con el drone...");
								outw.write(NOK.toCharArray());
								outw.flush();
								if ( drone != null ) {
									drone.stop();
									System.exit(0);
								}
							}
							outw.write(OK.toCharArray());
							outw.flush();
							break;
						case SEGUIR_RECTO:						
							try {
								drone.seguirRecto();
							} catch (Exception e) {					
								System.out.println("Error al realizar el paso de avanzar..");
								outw.write(NOK.toCharArray());
								outw.flush();
								if ( drone != null ) {
									drone.stop();
									System.exit(0);
								}
							}
							outw.write(OK.toCharArray());
							outw.flush();
							break;
						case GIRAR_DERECHA:						
							try {
								drone.yawDerecha();
							} catch (Exception e) {					
								System.out.println("Error al realizar el paso de girar derecha..");
								outw.write(NOK.toCharArray());
								outw.flush();
								if ( drone != null ) {
									drone.stop();
									System.exit(0);
								}
							}
							outw.write(OK.toCharArray());
							outw.flush();
							break;
						case GIRAR_IZQUIERDA:						
							try {
								drone.yawIzquierda();
							} catch (Exception e) {					
								System.out.println("Error al realizar el paso de girar izquierda..");
								outw.write(NOK.toCharArray());
								outw.flush();
								if ( drone != null ) {
									drone.stop();
									System.exit(0);
								}
							}
							outw.write(OK.toCharArray());
							outw.flush();
							break;
						case POSICION_ACTUAL:			
							String pos = "";
							double[] XY = drone.posicionActual();
							pos = XY[0] + "-" + XY[1];
							outw.write(pos.toCharArray());
							outw.flush();
							break;
						case ORIENTACION_ACTUAL:						
							outw.write(String.valueOf(drone.orientacionActual()).toCharArray());
							outw.flush();
							break;
						case SACAR_IMAGEN:						
							try {
								drone.sacarImagen();
							} catch (Exception e) {					
								System.out.println("Error al realizar la imagen");
								outw.write(NOK.toCharArray());
								outw.flush();
								if ( drone != null ) {
									drone.stop();
									System.exit(0);
								}
							}
							outw.write(OK.toCharArray());
							outw.flush();
							break;
						}

					cbuf = new char[512];
				}
			}
			if (drone != null) {
				drone.stop();
			}

			System.out.println("Objetivo localizado");
			System.exit(0);
		} catch (IOException e) {
			System.out.println("Conexión terminada");
			System.exit(0);
		}
	}	
}